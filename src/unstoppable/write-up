### Description

Prevent any user from executing flash loan

### Root cause

```solidity
function flashLoan(IERC3156FlashBorrower receiver, address _token, uint256 amount, bytes calldata data) external returns (bool)
{
    //...
    uint256 balanceBefore = totalAssets();
    if (convertToShares(totalSupply) != balanceBefore) revert InvalidBalance();
    //...
}
```

```solidity
function totalAssets() public view override nonReadReentrant returns (uint256) {
    return asset.balanceOf(address(this));
}
```

```solidity
function convertToShares(uint256 assets) public view virtual returns (uint256) {
    uint256 supply = totalSupply;

    return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());
}
```

Contract enforces a fragile invariant that fails whenever contract receive any token:

$$
\begin{aligned}
\frac{totalSupply * totalSupply}{balance} &= balance \\
\Rightarrow \quad balance &= totalSupply
\end{aligned}
$$

### Textual PoC

1. Vault has initial state: `balance = totalSupply`
2. Transfer 1 token to vault &rarr; `balance = totalSupply + 1`
3. All `flashLoan(...)` calls revert with `InvalidBalance()` error

### Coded PoC

- [Unstoppable.t.sol](../../test/unstoppable/Unstoppable.t.sol)
- Run
  ```bash
  forge test --mp test/unstoppable/Unstoppable.t.sol
  ```
